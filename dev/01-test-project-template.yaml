---
# This playbook is used to test the project template by executing the
# django-admin startproject command.
- hosts: localhost
  connection: local

  vars:
    clean_up: true
    project_name: TEST_PROJECT_NAME
    django_version: "5.1.2"
    install_project_dependencies: true
    setup_project: true

  tasks:
    - name: Check if the django-admin command is available
      ansible.builtin.command:
        cmd: django-admin --version
      register: django_admin_version
      failed_when: django_admin_version.rc != 0

    - name: Check if .env file exists as this seems to fail if it isn't
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/../../django_project_template/project_name/.env"
      register: env_file

    - name: Make a copy of .env.template to .env if not already present
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../../django_project_template/project_name/.env.template"
        dest: "{{ playbook_dir }}/../../django_project_template/project_name/.env"
      when: env_file.stat.exists == false

    - name: Generate a temporary directory for this test
      ansible.builtin.tempfile:
        state: directory
        prefix: ansible_django_project_template
      register: temp_dir

    - name: Clean up old temporary directories
      when: clean_up
      block:
        - name: Find all temp directories
          ansible.builtin.find:
            paths:
              - "{{ (temp_dir.path, '..') | path_join }}"
            patterns:
              - "ansible_django_project_template*"
            file_type: directory
          register: temp_dirs

        - name: Remove temp directories
          ansible.builtin.file:
            state: absent
            path: "{{ item }}"
          with_items: "{{ temp_dirs.files | map(attribute='path') }}"

    - name: Create the temporary directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ temp_dir.path }}"

    - name: Share the name of the temporary directory with the user
      debug:
        msg: "{{ temp_dir.path }}"

    - name: Use the template to start a new Django project
      ansible.builtin.command:
        cmd: |
          django-admin startproject
            --template={{ playbook_dir }}/../../django_project_template
            --extension 'py,yaml,md,template,toml,json'
            --name justfile
            --exclude '.ruff_cache'
            --exclude 'dev'
            --exclude '.env'
            --exclude 'db.sqlite3'
            {{ project_name }} {{ temp_dir.path }}

    - name: Clear out any files that shouldn't have been copied over
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ temp_dir.path }}/{{ project_name }}/db.sqlite3"

    - name: Set some django settings for testing purposes
      ansible.builtin.lineinfile:
        search_string: "{{ item.search }}"
        line: "{{ item.replacement }}"
        path: "{{ temp_dir.path }}/{{ project_name }}/.env"
      with_items:
        - search: "DEBUG="
          replacement: "DEBUG=True"
        - search: "ENVIRONMENT="
          replacement: "ENVIRONMENT=development"

    - name: Make sure the just commands have the pipenv environment variable set in Justfile
      ansible.builtin.lineinfile:
        line: 'export PIPENV_VENV_IN_PROJECT := "1"'
        path: "{{ temp_dir.path }}/justfile"
        search_string: "export PIPENV_VENV_IN_PROJECT"
        validate: just --unstable --fmt --check --justfile %s

    - name: Install dependencies
      when: install_project_dependencies
      block:
        - name: Init a git repository for pre-commit
          ansible.builtin.command:
            cmd: git init
            chdir: "{{ temp_dir.path }}"

        - name: Make an initial commit
          ansible.builtin.shell:
            cmd: git add . && git commit -m 'initial commit'
            chdir: "{{ temp_dir.path }}"

        - name: Install project dependencies
          ansible.builtin.command:
            cmd: just install
            chdir: "{{ temp_dir.path }}"

    - name: Setup project
      when: setup_project
      block:
        - name: Collect static files
          ansible.builtin.command:
            cmd: just collectstatic
            chdir: "{{ temp_dir.path }}"

        - name: Create migrations
          ansible.builtin.command:
            cmd: just makemigrations
            chdir: "{{ temp_dir.path }}"

        - name: Run migrations
          ansible.builtin.command:
            cmd: just migrate
            chdir: "{{ temp_dir.path }}"

        - name: Create an insecure superuser
          ansible.builtin.command:
            cmd: just createsuperuser --noinput --username admin
            chdir: "{{ temp_dir.path }}"
          environment:
            DJANGO_SUPERUSER_PASSWORD: admin

    - name: Open the directory
      block:
        - name: Check if open command exists
          ansible.builtin.command:
            cmd: which open
          register: open_command
          ignore_errors: yes

        - name: Open the directory
          ansible.builtin.command:
            cmd: open "{{ temp_dir.path }}"
          when: open_command.rc == 0
