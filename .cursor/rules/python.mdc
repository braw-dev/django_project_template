---
description: 
globs: **/*.py, src/**/*.py, tests/**/*.py
alwaysApply: false
---
---
description: Python best practices and patterns for modern software development with Django and SQLite
globs: **/*.py, src/**/*.py, tests/**/*.py
---

# Python Best Practices

## Project Structure
- Place tests in `tests/` directory within `/{{ project_name }}/`
- Keep configuration in `/{{ project_name }}/{{ project_name }}/settings.py` or as environment variables in `.env`
- Store requirements in `pyproject.toml`
- Place static files in `static/` directory
- Use `templates/` for Django templates

## Code Style
- Follow Black code formatting
- Use isort for import sorting
- Follow PEP 8 naming conventions:
  - snake_case for functions and variables
  - PascalCase for classes
  - UPPER_CASE for constants
- Maximum line length of 100 characters
- Use absolute imports over relative imports
- Sort imports

## Type Hints
- Use type hints for all function parameters and returns
- Import types from `typing` module
- Use `Optional[Type]` instead of `Type | None`
- Use `TypeVar` for generic types
- Define custom types in `types.py`
- Use `Protocol` for duck typing

## Database
- Use Django ORM
- Use proper connection pooling
- Implement proper relationships
- Use proper indexing strategies

## Authentication
- Use django-allauth for authentication with the custom model in `/{{ project_name }}/users/models.py`
- Use proper session security
- Implement CSRF protection
- Use proper role-based access control

## API Design
- Use Django Ninja for REST APIs
- Implement proper request validation
- Use proper HTTP status codes
- Handle errors consistently
- Use proper response formats
- Implement proper rate limiting

## Testing
- Use pytest for unit testing
- Use playwright for E2E tests
- Write tests for all routes
- Use pytest-cov for coverage
- Implement proper fixtures
- Use proper mocking with pytest-mock
- Test all error scenarios

## Security
- Use HTTPS in production
- Implement proper CORS
- Sanitize all user inputs
- Use proper session configuration
- Implement proper logging
- Follow OWASP guidelines

## Performance
- Use proper caching with Django cache
- Implement database query optimization
- Use proper connection pooling
- Implement proper pagination
- Use background tasks for heavy operations
- Monitor application performance

## Error Handling
- Create custom exception classes
- Use proper try-except blocks
- Implement proper logging
- Return proper error responses
- Handle edge cases properly
- Use proper error messages

## Documentation
- Use Google-style docstrings
- Document all public APIs
- Keep README.md updated
- Use proper inline comments
- Generate API documentation
- Document environment setup

## Development Workflow
- Use `uv` tooling
- Use proper Git workflow
- Follow semantic versioning
- Use proper CI/CD practices
- Implement proper logging

## Dependencies
- Pin dependency versions
- Use `pyproject.toml` and separate dev dependencies
- Use proper package versions
- Regularly update dependencies
- Check for security vulnerabilities