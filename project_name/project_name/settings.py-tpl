"""
Django settings for {{ project_name }}.

For more information on this file, see
https://docs.djangoproject.com/en/{{ docs_version }}/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
"""

import os
import sys
import tempfile
from email.utils import getaddresses
from pathlib import Path

import environ
from django.utils.translation import gettext_lazy as _

env = environ.Env()

# Used for public display e.g as default in <title> tags
PROJECT_DISPLAY_NAME = "{{ project_name }}"

PROJECT_SLUG = "{{ project_name }}"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(BASE_DIR / ".env")
environ.Env.read_env(BASE_DIR / ".env.local")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/{{ docs_version }}/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

DEBUG = env.bool("DEBUG", False)

TESTING = "test" in sys.argv

ENVIRONMENT = env.str("ENVIRONMENT", default="prod").lower()
IS_PRODUCTION = ENVIRONMENT in ["production", "prod"]

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

INTERNAL_IPS = [
    "127.0.0.1",
]

SITE_ID = 1

ADMINS = getaddresses([env("DJANGO_ADMINS")])

# Application definition

AUTH_USER_MODEL = "users.User"

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",  # Whitenoise for static files in development
    "django.contrib.staticfiles",
    "guardian",  # Object level permissions
    "django_filters",  # Filtering based on user input
    "django_extensions",  # Additional django extensions
    "allauth",  # Authentication
    "allauth.account",
    "allauth.mfa",  # Multi-factor authentication extension
    "meta",  # SEO metadata
    "djstripe",  # Stripe integration
    "django_htmx",  # HTMX integration
    "sri",  # Sub resource Integrity for JS
    "django_cotton",  # Javascript style components
    # Wagtail CMS
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "taggit",
    "modelcluster",
    # Polygot translation with DeepL
    "djangoPolyglot",
    # Project apps
    "{{ project_name }}.users",
    "{{ project_name }}.brand",  # Brand colours and logo
    "{{ project_name }}.marketing",  # Marketing content (incl. homepage) from Wagtail CMS
    "{{ project_name }}.core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",  # adds request.htmx attribute
    # allauth account middleware:
    "allauth.account.middleware.AccountMiddleware",
    # wagtail middleware:
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
]

if not TESTING:
    # Don't add debug toolbar in testing mode
    # https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#disable-the-toolbar-when-running-tests-optional
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        "debug_toolbar",
    ]
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        *MIDDLEWARE,
    ]

if not TESTING:
    # Don't add prometheus in testing mode
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        "django_prometheus",
    ]
    MIDDLEWARE = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",
        *MIDDLEWARE,
        "django_prometheus.middleware.PrometheusAfterMiddleware",
    ]

ROOT_URLCONF = "{{ project_name }}.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "{{ project_name }}.wsgi.application"


# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases

DATABASES = {
    "default": env.db_url("DB_DEFAULT_URL"),
}

# For databases, if using SQLITE, add the following options
# https://gcollazo.com/optimal-sqlite-settings-for-django/
SQLITE_OPTIONS = {
    "init_command": (
        "PRAGMA foreign_keys=ON;"
        "PRAGMA journal_mode = WAL;"
        "PRAGMA synchronous = NORMAL;"
        "PRAGMA busy_timeout = 500;"  # 500ms
        "PRAGMA temp_store = MEMORY;"
        f"PRAGMA mmap_size = {128 * 1024 * 1024};"  # 128MB
        f"PRAGMA journal_size_limit = {64 * 1024 * 1024};"  # 64MB
        f"PRAGMA cache_size = -{8 * 1024 * 1024};"  # 8MB of 4096 bytes pages
    ),
    "transaction_mode": "IMMEDIATE",
}

# Cache
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/cache/#using-a-custom-cache-backend
CACHES = {
    "default": {
        "BACKEND": "diskcache.DjangoCache",
        "LOCATION": os.path.join(tempfile.gettempdir(), f"{PROJECT_SLUG}-cache"),
        "TIMEOUT": 30,
        # ^-- Django setting for default timeout of each key.
        "SHARDS": 8,
        "DATABASE_TIMEOUT": 0.010,  # 10 milliseconds
        # ^-- Timeout for each DjangoCache database transaction.
        "OPTIONS": {"size_limit": 2**30},  # 1 gigabyte
    },
}

# Email settings
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/email/
if env.bool("SEND_EMAILS") and not TESTING:
    pass
else:
    # Use console backend for development
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

DEFAULT_FROM_EMAIL = f"noreply@{env.str("EMAIL_DOMAIN")}"
SERVER_EMAIL = f"root@{env.str('EMAIL_DOMAIN')}"

# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout
EMAIL_TIMEOUT = 5

# Password validation
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    "{{ project_name }}.hashers.SecureArgon2PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # default
    "guardian.backends.ObjectPermissionBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
)

LOGIN_REDIRECT_URL = "account:dashboard"
LOGOUT_REDIRECT_URL = "/"

# Allauth user account settings
# https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_CHANGE_EMAIL = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
ACCOUNT_LOGIN_BY_CODE_ENABLED = True
ACCOUNT_LOGIN_BY_CODE_TIMEOUT = 60 * 15  # 15 minutes
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_USERNAME_BLACKLIST: list[str] = []
ACCOUNT_USERNAME_MIN_LENGTH = 3
ACCOUNT_USERNAME_REQUIRED = True

# https://cookiecutter-django.readthedocs.io/en/latest/settings.html#other-environment-settings
# Force the `admin` sign in process to go through the `django-allauth` workflow
DJANGO_ADMIN_FORCE_ALLAUTH = True

# Allauth MFA settings
# https://docs.allauth.org/en/latest/mfa/webauthn.html

# Make sure "webauthn" is included.
MFA_SUPPORTED_TYPES = ["totp", "webauthn", "recovery_codes"]

# Optional: enable support for logging in using a (WebAuthn) passkey.
MFA_PASSKEY_LOGIN_ENABLED = True

# Optional -- use for local development only: the WebAuthn uses the
# ``fido2`` package, and versions up to including version 1.1.3 do not
# regard localhost as a secure origin, which is problematic during
# local development and testing.
MFA_WEBAUTHN_ALLOW_INSECURE_ORIGIN = DEBUG

MFA_TOTP_ISSUER = PROJECT_DISPLAY_NAME

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
        "OPTIONS": {
            "location": BASE_DIR / "media",
            "base_url": "/media/",
        },
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
STATICFILES_DIRS = [
    BASE_DIR / "static",
]  # Add additional static file directories other than the app directories
STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_HOST = env.str("DJANGO_STATIC_HOST", "")
STATIC_URL = STATIC_HOST + "/static/"

# Django newsletter
# https://django-newsletter.readthedocs.io/en/latest/installation.html
# Using sorl-thumbnail
NEWSLETTER_THUMBNAIL = "sorl-thumbnail"

# Django meta settings
# https://django-meta.readthedocs.io/en/latest/settings.html
META_SITE_PROTOCOL = "https"
if DEBUG:
    META_SITE_PROTOCOL = "http"
META_SITE_TYPE = "website"
META_SITE_NAME = PROJECT_DISPLAY_NAME
META_USE_TITLE_TAG = False
META_USE_OG_PROPERTIES = True
META_USE_TWITTER_PROPERTIES = True
META_USE_SITES = True

# Django cotton
# https://django-cotton.com/docs/configuration
COTTON_DIR = "components"

# Django Stripe settings
# https://dj-stripe.dev/2.8/reference/settings/
STRIPE_LIVE_SECRET_KEY = env.str("STRIPE_LIVE_SECRET_KEY")
STRIPE_TEST_SECRET_KEY = env.str("STRIPE_TEST_SECRET_KEY")
STRIPE_LIVE_MODE = env.bool("STRIPE_LIVE_MODE")
DJSTRIPE_WEBHOOK_SECRET = env.str("STRIPE_WEBHOOK_SECRET")
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"

# Django SRI settings
# https://github.com/RealOrangeOne/django-sri
SRI_ALGORITHM = "sha512"

# Internationalization
# https://docs.djangoproject.com/en/{{ docs_version }}/topics/i18n/

LANGUAGE_CODE = "en-us"

# Used by Polyglot to know what to create
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#languages
LANGUAGES = [
    ("de", _("German")),
    ("fr", _("French")),
    ("es", _("Spanish")),
    ("pt", _("Portuguese")),
    ("en", _("English")),
]

# Where to put the translations
LOCALE_PATHS = [
    BASE_DIR / "locale",
]

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

POLYGLOT_DEEPL_LICENSE = env.str("POLYGLOT_DEEPL_LICENSE")

# https://docs.djangoproject.com/en/{{ docs_version }}/ref/templates/builtins/#std-templatefilter-date  # noqa: E501
DATE_FORMAT = "d E Y"
SHORT_DATE_FORMAT = "Y/m/d"
DATETIME_FORMAT = "d E Y H:i:s"
SHORT_DATETIME_FORMAT = "Y/m/d H:i"

USE_THOUSAND_SEPARATOR = True

# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#std:setting-FORMS_URLFIELD_ASSUME_HTTPS  # noqa: E501
# Silences some console warnings
FORMS_URLFIELD_ASSUME_HTTPS = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/{{ docs_version }}/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Wagtail settings
# This is the human-readable name of your Wagtail install
# which welcomes users upon login to the Wagtail admin.
WAGTAIL_SITE_NAME = "{{ project_name }}"

# Allowed file extensions for documents in the document library.
# This can be omitted to allow all files, but note that this may present a security risk
# if untrusted users are allowed to upload files -
# see https://docs.wagtail.org/en/stable/advanced_topics/deploying.html#user-uploaded-files
WAGTAILDOCS_EXTENSIONS = ["csv", "docx", "key", "odt", "pdf", "pptx", "rtf", "txt", "xlsx", "zip"]

# Reverse the default case-sensitive handling of tags
TAGGIT_CASE_INSENSITIVE = True

# Production settings
# HTTPS settings: https://docs.djangoproject.com/en/5.1/topics/security/#ssl-https
# Recommendations from Mozilla: https://infosec.mozilla.org/guidelines/web_security.html
if IS_PRODUCTION:
    # Redirect all HTTP requests to HTTPS
    # https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-SECURE_SSL_REDIRECT
    SECURE_SSL_REDIRECT = True

    # Serve secure cookies
    # https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-SESSION_COOKIE_SECURE
    SESSION_COOKIE_SECURE = True
    # https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-CSRF_COOKIE_SECURE
    CSRF_COOKIE_SECURE = True

    # Read this header to determine if the request is secure
    # https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-SECURE_PROXY_SSL_HEADER
    # Caddy sets this server on the reverse proxy
    # https://caddyserver.com/docs/caddyfile/directives/reverse_proxy#defaults
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

    # HSTS settings
    # ----------------------------------------
    # Enable for subdomains
    # https://docs.djangoproject.com/en/5.1/ref/settings/#secure-hsts-include-subdomains
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # https://docs.djangoproject.com/en/5.1/ref/settings/#secure-hsts-seconds
    SECURE_HSTS_SECONDS = 60  # Start small, increase to 60 * 60 * 24 * 365 for 1 year
    # Add the preload header to be submitted to the HSTS preload list
    # https://docs.djangoproject.com/en/5.1/ref/settings/#secure-hsts-preload
    SECURE_HSTS_PRELOAD = True

# Custom testing settings to speed things up
if TESTING:
    # Disable logging during tests
    import logging

    logging.disable()

    PASSWORD_HASHERS = ("django.contrib.auth.hashers.MD5PasswordHasher",)

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
        },
    }

for db in DATABASES.values():
    if "sqlite3" in db["ENGINE"]:
        options = SQLITE_OPTIONS.copy()
        options.update(db.get("OPTIONS", {}))
        db["OPTIONS"] = options
